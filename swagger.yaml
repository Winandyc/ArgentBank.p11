openapi: 3.0.3
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '2.0.0' # Nouvelle version de l'API
  termsOfService: 'http://swagger.io/terms/'
servers:
  - url: http://localhost:3001/api/v2 # Mise à jour du chemin de base pour la nouvelle version
paths:
  /auth/login:
    post:
      tags:
        - Authentification
      summary: User Login
      description: API for Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Login Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /auth/signup:
    post:
      tags:
        - Authentification
      summary: User Signup
      description: API for user Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Signup Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error

# Route pour récupérer (get) les transactions du mois en cours.
  /accounts/{accountID}/transactions/current:
    get:
      tags:
        - Transactions Module
      summary: Fetch current month transactions
      description: Fetch transactions for the current month.
      parameters:
        - in: path
          name: accountID
          description: Unique account ID
          required: true
          schema:
            type: string

# Je propose d'ajouter une fonctionnalité de "triage" des transactions par catégorie :

        - in: query
          name: sortByCategory
          description: Sort transactions by category (optional)
          schema:
            type: boolean

# Paramètres de requête pour spécifier la catégorie à utiliser comme filtre :
        - in: query
          name: category
          description: Category to filter transactions (optional)
          schema:
            type: string
      responses:
        '200':
          description: Account's transactions fetched successfully for the current month
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserAccountList'
                  - $ref: '#/components/schemas/SortByCategoryResponse'
        '400':
          description: Bad request - Invalid fields
        '401':
          description: Unauthorized - Authentication failed
        '404':
          description: No transaction found for the specified month and account
        '500':
          description: Internal Server Error


# Route pour récupérer les détails d'une transaction spécifique et mise à jour des details d'une transaction.
  /accounts/{accountID}/transactions/{transactionID}:
    get:
      tags:
        - Transactions Module
      summary: Fetch a specific transaction
      description: Fetch details of a specific transaction using its transactionID.
      parameters:
        - in: path
          name: accountID
          description: Unique account ID
          required: true
          schema:
            type: string
        - in: path
          name: transactionID
          description: Unique transaction ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Bad request - Invalid fields
        '401':
          description: Unauthorized - Authentication failed
        '404':
          description: Transaction not found
        '500':
          description: Internal Server Error
components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
    ApiResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
    UserProfile:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
        profileImage:
          type: string
    UserAccountList:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
    SortByCategoryResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Account:
      type: object
      properties:
        accountId:
          type: string
        balance:
          type: number
    Category:
      type: object
      properties:
        name:
          type: string
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    Transaction:
      type: object
      properties:
        transactionId:
          type: string
        amount:
          type: number
        date:
          type: string
        category:
          type: string
